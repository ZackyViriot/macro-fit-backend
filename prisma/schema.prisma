// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  email String @unique
  firstName String
  lastName String
  password String
  createdAt DateTime @default(now())
  currentWeight Float?
  targetWeight Float?

  
  // User's feature preferences
  featurePreferences UserFeaturePreference[]
}

// Predefined groups
model Group {
  id Int @id @default(autoincrement())
  name String
  description String?
  createdAt DateTime @default(now())
  
  // Features in this group
  features Feature[]
}

// Predefined features
model Feature {
  id Int @id @default(autoincrement())
  name String
  description String?
  
  // Which group this feature belongs to
  groupId Int
  group Group @relation(fields: [groupId], references: [id])
  
  // Default state when user joins group
  defaultEnabled Boolean @default(false)
  
  createdAt DateTime @default(now())
  
  // User preferences for this feature
  userPreferences UserFeaturePreference[]
}

// User's personal feature settings
model UserFeaturePreference {
  id Int @id @default(autoincrement())
  
  userId Int
  user User @relation(fields: [userId], references: [id])
  
  featureId Int
  feature Feature @relation(fields: [featureId], references: [id])
  
  // User's personal setting (can override default)
  isEnabled Boolean
  
  createdAt DateTime @default(now())
  
  // Ensure unique user-feature combinations
  @@unique([userId, featureId])
}


